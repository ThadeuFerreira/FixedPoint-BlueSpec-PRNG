//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed Jul  4 22:02:03 -03 2018
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBoxMullerTb(CLK,
		     RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire start_wire$whas, state_set_pw$whas;

  // register _unnamed_
  reg [63 : 0] _unnamed_;
  wire [63 : 0] _unnamed_$D_IN;
  wire _unnamed_$EN;

  // register cont
  reg [31 : 0] cont;
  wire [31 : 0] cont$D_IN;
  wire cont$EN;

  // register fixCounter
  reg [64 : 0] fixCounter;
  wire [64 : 0] fixCounter$D_IN;
  wire fixCounter$EN;

  // register i
  reg [63 : 0] i;
  wire [63 : 0] i$D_IN;
  wire i$EN;

  // register n
  reg [31 : 0] n;
  wire [31 : 0] n$D_IN;
  wire n$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [3 : 0] state_mkFSMstate;
  reg [3 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // register tup
  reg [127 : 0] tup;
  wire [127 : 0] tup$D_IN;
  wire tup$EN;

  // register uniform_rand_num
  reg [64 : 0] uniform_rand_num;
  wire [64 : 0] uniform_rand_num$D_IN;
  wire uniform_rand_num$EN;

  // ports of submodule boxmuller
  wire [127 : 0] boxmuller$get;
  wire [63 : 0] boxmuller$run_val;
  wire [31 : 0] boxmuller$initialize_s1, boxmuller$initialize_s2;
  wire boxmuller$EN_get,
       boxmuller$EN_initialize,
       boxmuller$EN_run,
       boxmuller$RDY_run;

  // ports of submodule mLUT
  wire [64 : 0] mLUT$get, mLUT$run_input_val;
  wire mLUT$EN_get, mLUT$EN_run;

  // rule scheduling signals
  wire CAN_FIRE_RL_action_l101c17,
       CAN_FIRE_RL_action_l102c17,
       CAN_FIRE_RL_action_l104c13,
       CAN_FIRE_RL_action_l114c13,
       CAN_FIRE_RL_action_l70c9,
       CAN_FIRE_RL_action_l74c9,
       CAN_FIRE_RL_action_l78c9,
       CAN_FIRE_RL_action_l82c12,
       CAN_FIRE_RL_action_l87c22,
       CAN_FIRE_RL_action_l88c22,
       CAN_FIRE_RL_action_l90c13,
       CAN_FIRE_RL_action_l94c13,
       CAN_FIRE_RL_action_l96c13,
       CAN_FIRE_RL_auto_finish,
       CAN_FIRE_RL_auto_start,
       CAN_FIRE_RL_fsm_start,
       CAN_FIRE_RL_idle_l68c9,
       CAN_FIRE_RL_idle_l68c9_1,
       CAN_FIRE_RL_restart,
       CAN_FIRE_RL_start_reg__dreg_update,
       CAN_FIRE_RL_state_every,
       CAN_FIRE_RL_state_fired__dreg_update,
       CAN_FIRE_RL_state_handle_abort,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_12,
       CAN_FIRE___me_check_13,
       CAN_FIRE___me_check_14,
       CAN_FIRE___me_check_15,
       CAN_FIRE___me_check_16,
       CAN_FIRE___me_check_5,
       CAN_FIRE___me_check_6,
       CAN_FIRE___me_check_7,
       CAN_FIRE___me_check_8,
       CAN_FIRE___me_check_9,
       WILL_FIRE_RL_action_l101c17,
       WILL_FIRE_RL_action_l102c17,
       WILL_FIRE_RL_action_l104c13,
       WILL_FIRE_RL_action_l114c13,
       WILL_FIRE_RL_action_l70c9,
       WILL_FIRE_RL_action_l74c9,
       WILL_FIRE_RL_action_l78c9,
       WILL_FIRE_RL_action_l82c12,
       WILL_FIRE_RL_action_l87c22,
       WILL_FIRE_RL_action_l88c22,
       WILL_FIRE_RL_action_l90c13,
       WILL_FIRE_RL_action_l94c13,
       WILL_FIRE_RL_action_l96c13,
       WILL_FIRE_RL_auto_finish,
       WILL_FIRE_RL_auto_start,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l68c9,
       WILL_FIRE_RL_idle_l68c9_1,
       WILL_FIRE_RL_restart,
       WILL_FIRE_RL_start_reg__dreg_update,
       WILL_FIRE_RL_state_every,
       WILL_FIRE_RL_state_fired__dreg_update,
       WILL_FIRE_RL_state_handle_abort,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_12,
       WILL_FIRE___me_check_13,
       WILL_FIRE___me_check_14,
       WILL_FIRE___me_check_15,
       WILL_FIRE___me_check_16,
       WILL_FIRE___me_check_5,
       WILL_FIRE___me_check_6,
       WILL_FIRE___me_check_7,
       WILL_FIRE___me_check_8,
       WILL_FIRE___me_check_9;

  // inputs to muxes for submodule ports
  wire MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h35142;
  wire [129 : 0] _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d244,
		 _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d247,
		 _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d255,
		 _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d264,
		 _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d273,
		 _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d282,
		 _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d291,
		 _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d300,
		 _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d309,
		 _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d318,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d141,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d144,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d152,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d161,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d170,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d179,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d188,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d197,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d206,
		 _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d215,
		 _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_mLUT_get_24_B_ETC___d250,
		 _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_uniform_rand__ETC___d147,
		 _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_mLUT_g_ETC___d259,
		 _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_unifor_ETC___d156,
		 _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d165,
		 _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d268,
		 _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d174,
		 _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d277,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d183,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d286,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d192,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d295,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d201,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d210,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d219,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d304,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d313,
		 _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d322;
  wire [127 : 0] IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d63;
  wire [95 : 0] IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78,
		IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d75;
  wire [64 : 0] digit__h43111,
		digit__h43180,
		digit__h43271,
		digit__h43362,
		digit__h43453,
		digit__h43544,
		digit__h43635,
		digit__h43726,
		digit__h43817,
		digit__h43908,
		digit__h44267,
		digit__h44336,
		digit__h44427,
		digit__h44518,
		digit__h44609,
		digit__h44700,
		digit__h44791,
		digit__h44882,
		digit__h44973,
		digit__h45064,
		tx3178_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q2,
		tx3269_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q3,
		tx3360_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q4,
		tx3451_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q5,
		tx3542_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q6,
		tx3633_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q7,
		tx3724_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q8,
		tx3815_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q9,
		tx3906_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q10,
		tx4334_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q12,
		tx4425_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q13,
		tx4516_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q14,
		tx4607_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q15,
		tx4698_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q16,
		tx4789_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q17,
		tx4880_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q18,
		tx4971_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q19,
		tx5062_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q20,
		tx__h43178,
		tx__h43269,
		tx__h43360,
		tx__h43451,
		tx__h43542,
		tx__h43633,
		tx__h43724,
		tx__h43815,
		tx__h43906,
		tx__h44334,
		tx__h44425,
		tx__h44516,
		tx__h44607,
		tx__h44698,
		tx__h44789,
		tx__h44880,
		tx__h44971,
		tx__h45062,
		y__h43330,
		y__h43421,
		y__h43512,
		y__h43603,
		y__h43694,
		y__h43785,
		y__h43876,
		y__h43967,
		y__h44486,
		y__h44577,
		y__h44668,
		y__h44759,
		y__h44850,
		y__h44941,
		y__h45032,
		y__h45123;
  wire [63 : 0] x__h29225, x__h29241;
  wire [33 : 0] SEXT_mLUT_get_24_BITS_64_TO_32_25___d226,
		SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123;
  wire [32 : 0] mLUTget_BITS_64_TO_32__q11,
		uniform_rand_num_BITS_64_TO_32__q1;
  wire [31 : 0] x__h43135,
		x__h44291,
		y_avValue_snd__h43075,
		y_avValue_snd__h44231,
		y_f__h31202;
  wire abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d346,
       i_6_ULT_1_SL_n_7_8___d39;

  // submodule boxmuller
  mkBoxMuller boxmuller(.CLK(CLK),
			.RST_N(RST_N),
			.initialize_s1(boxmuller$initialize_s1),
			.initialize_s2(boxmuller$initialize_s2),
			.run_val(boxmuller$run_val),
			.EN_initialize(boxmuller$EN_initialize),
			.EN_run(boxmuller$EN_run),
			.EN_get(boxmuller$EN_get),
			.RDY_initialize(),
			.RDY_run(boxmuller$RDY_run),
			.get(boxmuller$get),
			.RDY_get());

  // submodule mLUT
  mkLogTableFxdP mLUT(.CLK(CLK),
		      .RST_N(RST_N),
		      .run_input_val(mLUT$run_input_val),
		      .EN_run(mLUT$EN_run),
		      .EN_get(mLUT$EN_get),
		      .RDY_run(),
		      .get(mLUT$get),
		      .RDY_get());

  // rule RL_restart
  assign CAN_FIRE_RL_restart = start_reg_1 && !state_fired ;
  assign WILL_FIRE_RL_restart = CAN_FIRE_RL_restart ;

  // rule RL_action_l74c9
  assign CAN_FIRE_RL_action_l74c9 = state_mkFSMstate == 4'd1 ;
  assign WILL_FIRE_RL_action_l74c9 = CAN_FIRE_RL_action_l74c9 ;

  // rule RL_action_l78c9
  assign CAN_FIRE_RL_action_l78c9 = state_mkFSMstate == 4'd2 ;
  assign WILL_FIRE_RL_action_l78c9 = CAN_FIRE_RL_action_l78c9 ;

  // rule RL_action_l82c12
  assign CAN_FIRE_RL_action_l82c12 =
	     i_6_ULT_1_SL_n_7_8___d39 &&
	     (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd13) ;
  assign WILL_FIRE_RL_action_l82c12 = CAN_FIRE_RL_action_l82c12 ;

  // rule RL_action_l90c13
  assign CAN_FIRE_RL_action_l90c13 = state_mkFSMstate == 4'd6 ;
  assign WILL_FIRE_RL_action_l90c13 = CAN_FIRE_RL_action_l90c13 ;

  // rule RL_action_l87c22
  assign CAN_FIRE_RL_action_l87c22 =
	     boxmuller$RDY_run && state_mkFSMstate == 4'd4 ;
  assign WILL_FIRE_RL_action_l87c22 = CAN_FIRE_RL_action_l87c22 ;

  // rule RL_action_l88c22
  assign CAN_FIRE_RL_action_l88c22 =
	     boxmuller$RDY_run && state_mkFSMstate == 4'd5 ;
  assign WILL_FIRE_RL_action_l88c22 = CAN_FIRE_RL_action_l88c22 ;

  // rule RL_action_l94c13
  assign CAN_FIRE_RL_action_l94c13 = state_mkFSMstate == 4'd7 ;
  assign WILL_FIRE_RL_action_l94c13 = CAN_FIRE_RL_action_l94c13 ;

  // rule RL_action_l96c13
  assign CAN_FIRE_RL_action_l96c13 = state_mkFSMstate == 4'd8 ;
  assign WILL_FIRE_RL_action_l96c13 = CAN_FIRE_RL_action_l96c13 ;

  // rule RL_action_l101c17
  assign CAN_FIRE_RL_action_l101c17 = state_mkFSMstate == 4'd9 ;
  assign WILL_FIRE_RL_action_l101c17 = CAN_FIRE_RL_action_l101c17 ;

  // rule RL_action_l102c17
  assign CAN_FIRE_RL_action_l102c17 = state_mkFSMstate == 4'd10 ;
  assign WILL_FIRE_RL_action_l102c17 = CAN_FIRE_RL_action_l102c17 ;

  // rule RL_action_l104c13
  assign CAN_FIRE_RL_action_l104c13 = state_mkFSMstate == 4'd11 ;
  assign WILL_FIRE_RL_action_l104c13 = CAN_FIRE_RL_action_l104c13 ;

  // rule RL_action_l114c13
  assign CAN_FIRE_RL_action_l114c13 = state_mkFSMstate == 4'd12 ;
  assign WILL_FIRE_RL_action_l114c13 = CAN_FIRE_RL_action_l114c13 ;

  // rule __me_check_6
  assign CAN_FIRE___me_check_6 = 1'b1 ;
  assign WILL_FIRE___me_check_6 = 1'b1 ;

  // rule __me_check_7
  assign CAN_FIRE___me_check_7 = 1'b1 ;
  assign WILL_FIRE___me_check_7 = 1'b1 ;

  // rule __me_check_8
  assign CAN_FIRE___me_check_8 = 1'b1 ;
  assign WILL_FIRE___me_check_8 = 1'b1 ;

  // rule __me_check_9
  assign CAN_FIRE___me_check_9 = 1'b1 ;
  assign WILL_FIRE___me_check_9 = 1'b1 ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule __me_check_13
  assign CAN_FIRE___me_check_13 = 1'b1 ;
  assign WILL_FIRE___me_check_13 = 1'b1 ;

  // rule __me_check_12
  assign CAN_FIRE___me_check_12 = 1'b1 ;
  assign WILL_FIRE___me_check_12 = 1'b1 ;

  // rule __me_check_14
  assign CAN_FIRE___me_check_14 = 1'b1 ;
  assign WILL_FIRE___me_check_14 = 1'b1 ;

  // rule __me_check_15
  assign CAN_FIRE___me_check_15 = 1'b1 ;
  assign WILL_FIRE___me_check_15 = 1'b1 ;

  // rule __me_check_16
  assign CAN_FIRE___me_check_16 = 1'b1 ;
  assign WILL_FIRE___me_check_16 = 1'b1 ;

  // rule RL_fsm_start
  assign CAN_FIRE_RL_fsm_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d346 &&
	     start_reg ;
  assign WILL_FIRE_RL_fsm_start = CAN_FIRE_RL_fsm_start ;

  // rule RL_idle_l68c9
  assign CAN_FIRE_RL_idle_l68c9 =
	     !i_6_ULT_1_SL_n_7_8___d39 && !start_wire$whas &&
	     state_mkFSMstate == 4'd3 ;
  assign WILL_FIRE_RL_idle_l68c9 = CAN_FIRE_RL_idle_l68c9 ;

  // rule RL_idle_l68c9_1
  assign CAN_FIRE_RL_idle_l68c9_1 =
	     !i_6_ULT_1_SL_n_7_8___d39 && !start_wire$whas &&
	     state_mkFSMstate == 4'd13 ;
  assign WILL_FIRE_RL_idle_l68c9_1 = CAN_FIRE_RL_idle_l68c9_1 ;

  // rule RL_auto_start
  assign CAN_FIRE_RL_auto_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d346 &&
	     !start_reg &&
	     !running ;
  assign WILL_FIRE_RL_auto_start = CAN_FIRE_RL_auto_start ;

  // rule RL_auto_finish
  assign CAN_FIRE_RL_auto_finish =
	     running &&
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d346 &&
	     !start_reg ;
  assign WILL_FIRE_RL_auto_finish = CAN_FIRE_RL_auto_finish ;

  // rule RL_action_l70c9
  assign CAN_FIRE_RL_action_l70c9 =
	     start_wire$whas && state_mkFSMstate == 4'd0 ||
	     !i_6_ULT_1_SL_n_7_8___d39 && start_wire$whas &&
	     state_mkFSMstate == 4'd3 ||
	     !i_6_ULT_1_SL_n_7_8___d39 && start_wire$whas &&
	     state_mkFSMstate == 4'd13 ;
  assign WILL_FIRE_RL_action_l70c9 = CAN_FIRE_RL_action_l70c9 ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule RL_start_reg__dreg_update
  assign CAN_FIRE_RL_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_start_reg__dreg_update = 1'd1 ;

  // rule RL_state_handle_abort
  assign CAN_FIRE_RL_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_state_handle_abort = 1'b0 ;

  // rule RL_state_every
  assign CAN_FIRE_RL_state_every = 1'd1 ;
  assign WILL_FIRE_RL_state_every = 1'd1 ;

  // rule RL_state_fired__dreg_update
  assign CAN_FIRE_RL_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_state_fired__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l68c9_1 || WILL_FIRE_RL_idle_l68c9 ;

  // inlined wires
  assign start_wire$whas = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_restart ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l68c9_1 || WILL_FIRE_RL_idle_l68c9 ||
	     WILL_FIRE_RL_action_l114c13 ||
	     WILL_FIRE_RL_action_l104c13 ||
	     WILL_FIRE_RL_action_l102c17 ||
	     WILL_FIRE_RL_action_l101c17 ||
	     WILL_FIRE_RL_action_l96c13 ||
	     WILL_FIRE_RL_action_l94c13 ||
	     WILL_FIRE_RL_action_l90c13 ||
	     WILL_FIRE_RL_action_l88c22 ||
	     WILL_FIRE_RL_action_l87c22 ||
	     WILL_FIRE_RL_action_l82c12 ||
	     WILL_FIRE_RL_action_l78c9 ||
	     WILL_FIRE_RL_action_l74c9 ||
	     WILL_FIRE_RL_action_l70c9 ;

  // register _unnamed_
  assign _unnamed_$D_IN =
	     (!IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78[95] &&
	      (IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78[63] ||
	       IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78[95:64] !=
	       32'd0)) ?
	       64'h7FFFFFFFFFFFFFFF :
	       ((IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78[95] &&
		 (!IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78[63] ||
		  ~IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78[95:64] !=
		  32'd0)) ?
		  64'h8000000000000000 :
		  IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78[63:0]) ;
  assign _unnamed_$EN = CAN_FIRE_RL_action_l82c12 ;

  // register cont
  assign cont$D_IN = cont + 32'd1 ;
  assign cont$EN = CAN_FIRE_RL_action_l114c13 ;

  // register fixCounter
  assign fixCounter$D_IN = fixCounter + 65'd268435456 ;
  assign fixCounter$EN = CAN_FIRE_RL_action_l114c13 ;

  // register i
  assign i$D_IN = i + 64'd1 ;
  assign i$EN = CAN_FIRE_RL_action_l114c13 ;

  // register n
  assign n$D_IN = 32'd5 ;
  assign n$EN = CAN_FIRE_RL_action_l70c9 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = CAN_FIRE_RL_auto_start ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_auto_start ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l70c9 or
	  WILL_FIRE_RL_action_l74c9 or
	  WILL_FIRE_RL_action_l78c9 or
	  WILL_FIRE_RL_action_l82c12 or
	  WILL_FIRE_RL_action_l87c22 or
	  WILL_FIRE_RL_action_l88c22 or
	  WILL_FIRE_RL_action_l90c13 or
	  WILL_FIRE_RL_action_l94c13 or
	  WILL_FIRE_RL_action_l96c13 or
	  WILL_FIRE_RL_action_l101c17 or
	  WILL_FIRE_RL_action_l102c17 or
	  WILL_FIRE_RL_action_l104c13 or WILL_FIRE_RL_action_l114c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_action_l70c9: state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_action_l74c9: state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_action_l78c9: state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_action_l82c12: state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_action_l87c22: state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_action_l88c22: state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_action_l90c13: state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_action_l94c13: state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_action_l96c13: state_mkFSMstate$D_IN = 4'd9;
      WILL_FIRE_RL_action_l101c17: state_mkFSMstate$D_IN = 4'd10;
      WILL_FIRE_RL_action_l102c17: state_mkFSMstate$D_IN = 4'd11;
      WILL_FIRE_RL_action_l104c13: state_mkFSMstate$D_IN = 4'd12;
      WILL_FIRE_RL_action_l114c13: state_mkFSMstate$D_IN = 4'd13;
      default: state_mkFSMstate$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l68c9_1 || WILL_FIRE_RL_idle_l68c9 ||
	     WILL_FIRE_RL_action_l70c9 ||
	     WILL_FIRE_RL_action_l74c9 ||
	     WILL_FIRE_RL_action_l78c9 ||
	     WILL_FIRE_RL_action_l82c12 ||
	     WILL_FIRE_RL_action_l87c22 ||
	     WILL_FIRE_RL_action_l88c22 ||
	     WILL_FIRE_RL_action_l90c13 ||
	     WILL_FIRE_RL_action_l94c13 ||
	     WILL_FIRE_RL_action_l96c13 ||
	     WILL_FIRE_RL_action_l101c17 ||
	     WILL_FIRE_RL_action_l102c17 ||
	     WILL_FIRE_RL_action_l104c13 ||
	     WILL_FIRE_RL_action_l114c13 ;

  // register tup
  assign tup$D_IN = boxmuller$get ;
  assign tup$EN = CAN_FIRE_RL_action_l90c13 ;

  // register uniform_rand_num
  assign uniform_rand_num$D_IN = { 33'd0, tup[127:96] } ;
  assign uniform_rand_num$EN = CAN_FIRE_RL_action_l96c13 ;

  // submodule boxmuller
  assign boxmuller$initialize_s1 = 32'd0 ;
  assign boxmuller$initialize_s2 = 32'd56249 ;
  assign boxmuller$run_val = WILL_FIRE_RL_action_l87c22 ? _unnamed_ : 64'd0 ;
  assign boxmuller$EN_initialize = CAN_FIRE_RL_action_l74c9 ;
  assign boxmuller$EN_run =
	     WILL_FIRE_RL_action_l87c22 || WILL_FIRE_RL_action_l88c22 ;
  assign boxmuller$EN_get = CAN_FIRE_RL_action_l90c13 ;

  // submodule mLUT
  assign mLUT$run_input_val =
	     WILL_FIRE_RL_action_l101c17 ? uniform_rand_num : 65'd0 ;
  assign mLUT$EN_run =
	     WILL_FIRE_RL_action_l101c17 || WILL_FIRE_RL_action_l102c17 ;
  assign mLUT$EN_get = CAN_FIRE_RL_action_l104c13 ;

  // remaining internal signals
  assign IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78 =
	     (!IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d63[127] &&
	      IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d75[95]) ?
	       96'h7FFFFFFFFFFFFFFFFFFFFFFF :
	       IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d75 ;
  assign IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d63 =
	     x__h29225 * x__h29225 ;
  assign IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d75 =
	     IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d63[127:32] +
	     { 64'd0, y_f__h31202 } ;
  assign SEXT_mLUT_get_24_BITS_64_TO_32_25___d226 =
	     { mLUTget_BITS_64_TO_32__q11[32], mLUTget_BITS_64_TO_32__q11 } ;
  assign SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123 =
	     { uniform_rand_num_BITS_64_TO_32__q1[32],
	       uniform_rand_num_BITS_64_TO_32__q1 } ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d244 =
	     { 33'd0, x__h44291 } * 65'd10 ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d247 =
	     { 33'd0, x__h44291 } * 65'd100 ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d255 =
	     { 33'd0, x__h44291 } * 65'd1000 ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d264 =
	     { 33'd0, x__h44291 } * 65'd10000 ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d273 =
	     { 33'd0, x__h44291 } * 65'd100000 ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d282 =
	     { 33'd0, x__h44291 } * 65'd1000000 ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d291 =
	     { 33'd0, x__h44291 } * 65'd10000000 ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d300 =
	     { 33'd0, x__h44291 } * 65'd100000000 ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d309 =
	     { 33'd0, x__h44291 } * 65'd1000000000 ;
  assign _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d318 =
	     { 33'd0, x__h44291 } * 65'h000000002540BE400 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d141 =
	     { 33'd0, x__h43135 } * 65'd10 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d144 =
	     { 33'd0, x__h43135 } * 65'd100 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d152 =
	     { 33'd0, x__h43135 } * 65'd1000 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d161 =
	     { 33'd0, x__h43135 } * 65'd10000 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d170 =
	     { 33'd0, x__h43135 } * 65'd100000 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d179 =
	     { 33'd0, x__h43135 } * 65'd1000000 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d188 =
	     { 33'd0, x__h43135 } * 65'd10000000 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d197 =
	     { 33'd0, x__h43135 } * 65'd100000000 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d206 =
	     { 33'd0, x__h43135 } * 65'd1000000000 ;
  assign _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d215 =
	     { 33'd0, x__h43135 } * 65'h000000002540BE400 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_mLUT_get_24_B_ETC___d250 =
	     65'd10 * digit__h44267 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_uniform_rand__ETC___d147 =
	     65'd10 * digit__h43111 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_mLUT_g_ETC___d259 =
	     65'd10 * y__h44486 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_unifor_ETC___d156 =
	     65'd10 * y__h43330 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d165 =
	     65'd10 * y__h43421 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d268 =
	     65'd10 * y__h44577 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d174 =
	     65'd10 * y__h43512 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d277 =
	     65'd10 * y__h44668 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d183 =
	     65'd10 * y__h43603 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d286 =
	     65'd10 * y__h44759 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d192 =
	     65'd10 * y__h43694 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d295 =
	     65'd10 * y__h44850 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d201 =
	     65'd10 * y__h43785 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d210 =
	     65'd10 * y__h43876 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d219 =
	     65'd10 * y__h43967 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d304 =
	     65'd10 * y__h44941 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d313 =
	     65'd10 * y__h45032 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d322 =
	     65'd10 * y__h45123 ;
  assign abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d346 =
	     (state_mkFSMstate == 4'd0 ||
	      !i_6_ULT_1_SL_n_7_8___d39 && state_mkFSMstate == 4'd3 ||
	      !i_6_ULT_1_SL_n_7_8___d39 && state_mkFSMstate == 4'd13) &&
	     (!start_reg_1 || state_fired) ;
  assign digit__h43111 =
	     { 61'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d141[35:32] } ;
  assign digit__h43180 =
	     { 61'd0,
	       tx3178_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q2[3:0] } ;
  assign digit__h43271 =
	     { 61'd0,
	       tx3269_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q3[3:0] } ;
  assign digit__h43362 =
	     { 61'd0,
	       tx3360_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q4[3:0] } ;
  assign digit__h43453 =
	     { 61'd0,
	       tx3451_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q5[3:0] } ;
  assign digit__h43544 =
	     { 61'd0,
	       tx3542_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q6[3:0] } ;
  assign digit__h43635 =
	     { 61'd0,
	       tx3633_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q7[3:0] } ;
  assign digit__h43726 =
	     { 61'd0,
	       tx3724_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q8[3:0] } ;
  assign digit__h43817 =
	     { 61'd0,
	       tx3815_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q9[3:0] } ;
  assign digit__h43908 =
	     { 61'd0,
	       tx3906_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q10[3:0] } ;
  assign digit__h44267 =
	     { 61'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d244[35:32] } ;
  assign digit__h44336 =
	     { 61'd0,
	       tx4334_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q12[3:0] } ;
  assign digit__h44427 =
	     { 61'd0,
	       tx4425_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q13[3:0] } ;
  assign digit__h44518 =
	     { 61'd0,
	       tx4516_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q14[3:0] } ;
  assign digit__h44609 =
	     { 61'd0,
	       tx4607_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q15[3:0] } ;
  assign digit__h44700 =
	     { 61'd0,
	       tx4698_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q16[3:0] } ;
  assign digit__h44791 =
	     { 61'd0,
	       tx4789_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q17[3:0] } ;
  assign digit__h44882 =
	     { 61'd0,
	       tx4880_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q18[3:0] } ;
  assign digit__h44973 =
	     { 61'd0,
	       tx4971_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q19[3:0] } ;
  assign digit__h45064 =
	     { 61'd0,
	       tx5062_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q20[3:0] } ;
  assign i_6_ULT_1_SL_n_7_8___d39 = i < 64'd1 << n ;
  assign mLUTget_BITS_64_TO_32__q11 = mLUT$get[64:32] ;
  assign tx3178_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q2 =
	     tx__h43178 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_uniform_rand__ETC___d147[64:0] ;
  assign tx3269_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q3 =
	     tx__h43269 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_unifor_ETC___d156[64:0] ;
  assign tx3360_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q4 =
	     tx__h43360 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d165[64:0] ;
  assign tx3451_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q5 =
	     tx__h43451 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d174[64:0] ;
  assign tx3542_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q6 =
	     tx__h43542 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d183[64:0] ;
  assign tx3633_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q7 =
	     tx__h43633 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d192[64:0] ;
  assign tx3724_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q8 =
	     tx__h43724 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d201[64:0] ;
  assign tx3815_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q9 =
	     tx__h43815 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d210[64:0] ;
  assign tx3906_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q10 =
	     tx__h43906 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d219[64:0] ;
  assign tx4334_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q12 =
	     tx__h44334 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_mLUT_get_24_B_ETC___d250[64:0] ;
  assign tx4425_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q13 =
	     tx__h44425 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_mLUT_g_ETC___d259[64:0] ;
  assign tx4516_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q14 =
	     tx__h44516 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d268[64:0] ;
  assign tx4607_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q15 =
	     tx__h44607 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d277[64:0] ;
  assign tx4698_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q16 =
	     tx__h44698 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d286[64:0] ;
  assign tx4789_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q17 =
	     tx__h44789 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d295[64:0] ;
  assign tx4880_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q18 =
	     tx__h44880 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d304[64:0] ;
  assign tx4971_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q19 =
	     tx__h44971 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d313[64:0] ;
  assign tx5062_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q20 =
	     tx__h45062 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d322[64:0] ;
  assign tx__h43178 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d144[64:32] } ;
  assign tx__h43269 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d152[64:32] } ;
  assign tx__h43360 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d161[64:32] } ;
  assign tx__h43451 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d170[64:32] } ;
  assign tx__h43542 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d179[64:32] } ;
  assign tx__h43633 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d188[64:32] } ;
  assign tx__h43724 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d197[64:32] } ;
  assign tx__h43815 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d206[64:32] } ;
  assign tx__h43906 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_uniform_rand_num_17_BITS_64_T_ETC___d215[64:32] } ;
  assign tx__h44334 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d247[64:32] } ;
  assign tx__h44425 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d255[64:32] } ;
  assign tx__h44516 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d264[64:32] } ;
  assign tx__h44607 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d273[64:32] } ;
  assign tx__h44698 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d282[64:32] } ;
  assign tx__h44789 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d291[64:32] } ;
  assign tx__h44880 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d300[64:32] } ;
  assign tx__h44971 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d309[64:32] } ;
  assign tx__h45062 =
	     { 32'd0,
	       _0_CONCAT_IF_SEXT_mLUT_get_24_BITS_64_TO_32_25__ETC___d318[64:32] } ;
  assign uniform_rand_num_BITS_64_TO_32__q1 = uniform_rand_num[64:32] ;
  assign x__h29225 = cont[31] ? -x__h29241 : x__h29241 ;
  assign x__h29241 = { cont, 32'd0 } ;
  assign x__h43135 =
	     (SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123[33] &&
	      uniform_rand_num[31:0] != 32'd0) ?
	       y_avValue_snd__h43075 :
	       uniform_rand_num[31:0] ;
  assign x__h44291 =
	     (SEXT_mLUT_get_24_BITS_64_TO_32_25___d226[33] &&
	      mLUT$get[31:0] != 32'd0) ?
	       y_avValue_snd__h44231 :
	       mLUT$get[31:0] ;
  assign y__h43330 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_uniform_rand__ETC___d147[64:0] +
	     digit__h43180 ;
  assign y__h43421 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_unifor_ETC___d156[64:0] +
	     digit__h43271 ;
  assign y__h43512 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d165[64:0] +
	     digit__h43362 ;
  assign y__h43603 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d174[64:0] +
	     digit__h43453 ;
  assign y__h43694 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d183[64:0] +
	     digit__h43544 ;
  assign y__h43785 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d192[64:0] +
	     digit__h43635 ;
  assign y__h43876 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d201[64:0] +
	     digit__h43726 ;
  assign y__h43967 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d210[64:0] +
	     digit__h43817 ;
  assign y__h44486 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_mLUT_get_24_B_ETC___d250[64:0] +
	     digit__h44336 ;
  assign y__h44577 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_mLUT_g_ETC___d259[64:0] +
	     digit__h44427 ;
  assign y__h44668 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d268[64:0] +
	     digit__h44518 ;
  assign y__h44759 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d277[64:0] +
	     digit__h44609 ;
  assign y__h44850 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d286[64:0] +
	     digit__h44700 ;
  assign y__h44941 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d295[64:0] +
	     digit__h44791 ;
  assign y__h45032 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d304[64:0] +
	     digit__h44882 ;
  assign y__h45123 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d313[64:0] +
	     digit__h44973 ;
  assign y_avValue_snd__h43075 = 32'd0 - uniform_rand_num[31:0] ;
  assign y_avValue_snd__h44231 = 32'd0 - mLUT$get[31:0] ;
  assign y_f__h31202 =
	     (IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d63[31] &&
	      (IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d63[127] ||
	       IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d63[30:0] !=
	       31'd0)) ?
	       32'd1 :
	       32'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        _unnamed_ <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cont <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fixCounter <= `BSV_ASSIGNMENT_DELAY 65'd0;
	i <= `BSV_ASSIGNMENT_DELAY 64'd0;
	n <= `BSV_ASSIGNMENT_DELAY 32'd30;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uniform_rand_num <= `BSV_ASSIGNMENT_DELAY 65'd0;
      end
    else
      begin
        if (_unnamed_$EN) _unnamed_ <= `BSV_ASSIGNMENT_DELAY _unnamed_$D_IN;
	if (cont$EN) cont <= `BSV_ASSIGNMENT_DELAY cont$D_IN;
	if (fixCounter$EN)
	  fixCounter <= `BSV_ASSIGNMENT_DELAY fixCounter$D_IN;
	if (i$EN) i <= `BSV_ASSIGNMENT_DELAY i$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
	if (uniform_rand_num$EN)
	  uniform_rand_num <= `BSV_ASSIGNMENT_DELAY uniform_rand_num$D_IN;
      end
    if (tup$EN) tup <= `BSV_ASSIGNMENT_DELAY tup$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    _unnamed_ = 64'hAAAAAAAAAAAAAAAA;
    cont = 32'hAAAAAAAA;
    fixCounter = 65'h0AAAAAAAAAAAAAAAA;
    i = 64'hAAAAAAAAAAAAAAAA;
    n = 32'hAAAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 4'hA;
    tup = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    uniform_rand_num = 65'h0AAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l78c9)
	$display("#==================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l94c13)
	begin
	  v__h35142 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l94c13) $display("*", v__h35142);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $display("! -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13 &&
	  SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123[33] &&
	  uniform_rand_num[31:0] != 32'd0 &&
	  SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123 == 34'h3FFFFFFFF)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13 &&
	  SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123[33] &&
	  uniform_rand_num[31:0] != 32'd0 &&
	  SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123 != 34'h3FFFFFFFF)
	$write("%0d.",
	       $signed(SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123 +
		       34'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13 &&
	  (!SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123[33] ||
	   uniform_rand_num[31:0] == 32'd0))
	$write("%0d.",
	       $signed(SEXT_uniform_rand_num_17_BITS_64_TO_32_22___d123));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43180);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43271);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43362);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43453);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43544);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43635);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43726);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43817);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h43908);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $display("! -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13 &&
	  SEXT_mLUT_get_24_BITS_64_TO_32_25___d226[33] &&
	  mLUT$get[31:0] != 32'd0 &&
	  SEXT_mLUT_get_24_BITS_64_TO_32_25___d226 == 34'h3FFFFFFFF)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13 &&
	  SEXT_mLUT_get_24_BITS_64_TO_32_25___d226[33] &&
	  mLUT$get[31:0] != 32'd0 &&
	  SEXT_mLUT_get_24_BITS_64_TO_32_25___d226 != 34'h3FFFFFFFF)
	$write("%0d.",
	       $signed(SEXT_mLUT_get_24_BITS_64_TO_32_25___d226 + 34'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13 &&
	  (!SEXT_mLUT_get_24_BITS_64_TO_32_25___d226[33] ||
	   mLUT$get[31:0] == 32'd0))
	$write("%0d.", $signed(SEXT_mLUT_get_24_BITS_64_TO_32_25___d226));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h44267);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h44336);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h44427);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h44518);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h44609);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h44700);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h44791);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h44882);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h44973);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("%0d", digit__h45064);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("### ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13)
	$write("<FP %b.%b>",
	       $signed(uniform_rand_num[64:32]),
	       $unsigned(uniform_rand_num[31:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write(" ###\n", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write("### ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13)
	$write("<FP %b.%b>",
	       $signed(mLUT$get[64:32]),
	       $unsigned(mLUT$get[31:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13) $write(" ###\n", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l74c9 &&
	  (WILL_FIRE_RL_action_l78c9 || WILL_FIRE_RL_action_l82c12 ||
	   WILL_FIRE_RL_action_l87c22 ||
	   WILL_FIRE_RL_action_l88c22 ||
	   WILL_FIRE_RL_action_l90c13 ||
	   WILL_FIRE_RL_action_l94c13 ||
	   WILL_FIRE_RL_action_l96c13 ||
	   WILL_FIRE_RL_action_l101c17 ||
	   WILL_FIRE_RL_action_l102c17 ||
	   WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 74, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l74c9] and\n  [RL_action_l78c9, RL_action_l82c12, RL_action_l87c22, RL_action_l88c22,\n  RL_action_l90c13, RL_action_l94c13, RL_action_l96c13, RL_action_l101c17,\n  RL_action_l102c17, RL_action_l104c13, RL_action_l114c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l78c9 &&
	  (WILL_FIRE_RL_action_l82c12 || WILL_FIRE_RL_action_l87c22 ||
	   WILL_FIRE_RL_action_l88c22 ||
	   WILL_FIRE_RL_action_l90c13 ||
	   WILL_FIRE_RL_action_l94c13 ||
	   WILL_FIRE_RL_action_l96c13 ||
	   WILL_FIRE_RL_action_l101c17 ||
	   WILL_FIRE_RL_action_l102c17 ||
	   WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 78, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l78c9] and\n  [RL_action_l82c12, RL_action_l87c22, RL_action_l88c22, RL_action_l90c13,\n  RL_action_l94c13, RL_action_l96c13, RL_action_l101c17, RL_action_l102c17,\n  RL_action_l104c13, RL_action_l114c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l82c12 &&
	  (WILL_FIRE_RL_action_l87c22 || WILL_FIRE_RL_action_l88c22 ||
	   WILL_FIRE_RL_action_l90c13 ||
	   WILL_FIRE_RL_action_l94c13 ||
	   WILL_FIRE_RL_action_l96c13 ||
	   WILL_FIRE_RL_action_l101c17 ||
	   WILL_FIRE_RL_action_l102c17 ||
	   WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 82, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l82c12] and\n  [RL_action_l87c22, RL_action_l88c22, RL_action_l90c13, RL_action_l94c13,\n  RL_action_l96c13, RL_action_l101c17, RL_action_l102c17, RL_action_l104c13,\n  RL_action_l114c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l87c22 &&
	  (WILL_FIRE_RL_action_l88c22 || WILL_FIRE_RL_action_l90c13 ||
	   WILL_FIRE_RL_action_l94c13 ||
	   WILL_FIRE_RL_action_l96c13 ||
	   WILL_FIRE_RL_action_l101c17 ||
	   WILL_FIRE_RL_action_l102c17 ||
	   WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 87, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l87c22] and\n  [RL_action_l88c22, RL_action_l90c13, RL_action_l94c13, RL_action_l96c13,\n  RL_action_l101c17, RL_action_l102c17, RL_action_l104c13, RL_action_l114c13]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l88c22 &&
	  (WILL_FIRE_RL_action_l90c13 || WILL_FIRE_RL_action_l94c13 ||
	   WILL_FIRE_RL_action_l96c13 ||
	   WILL_FIRE_RL_action_l101c17 ||
	   WILL_FIRE_RL_action_l102c17 ||
	   WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 88, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l88c22] and\n  [RL_action_l90c13, RL_action_l94c13, RL_action_l96c13, RL_action_l101c17,\n  RL_action_l102c17, RL_action_l104c13, RL_action_l114c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l90c13 &&
	  (WILL_FIRE_RL_action_l94c13 || WILL_FIRE_RL_action_l96c13 ||
	   WILL_FIRE_RL_action_l101c17 ||
	   WILL_FIRE_RL_action_l102c17 ||
	   WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 90, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l90c13] and\n  [RL_action_l94c13, RL_action_l96c13, RL_action_l101c17, RL_action_l102c17,\n  RL_action_l104c13, RL_action_l114c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l96c13 &&
	  (WILL_FIRE_RL_action_l101c17 || WILL_FIRE_RL_action_l102c17 ||
	   WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 96, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l96c13] and\n  [RL_action_l101c17, RL_action_l102c17, RL_action_l104c13, RL_action_l114c13]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l94c13 &&
	  (WILL_FIRE_RL_action_l96c13 || WILL_FIRE_RL_action_l101c17 ||
	   WILL_FIRE_RL_action_l102c17 ||
	   WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 94, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l94c13] and\n  [RL_action_l96c13, RL_action_l101c17, RL_action_l102c17, RL_action_l104c13,\n  RL_action_l114c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l101c17 &&
	  (WILL_FIRE_RL_action_l102c17 || WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 101, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l101c17] and\n  [RL_action_l102c17, RL_action_l104c13, RL_action_l114c13] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l102c17 &&
	  (WILL_FIRE_RL_action_l104c13 || WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 102, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l102c17] and\n  [RL_action_l104c13, RL_action_l114c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l104c13 && WILL_FIRE_RL_action_l114c13)
	$display("Error: \"BoxMullerTb.bsv\", line 104, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l104c13] and\n  [RL_action_l114c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_auto_finish) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l70c9 &&
	  (WILL_FIRE_RL_action_l74c9 || WILL_FIRE_RL_action_l78c9 ||
	   WILL_FIRE_RL_action_l82c12 ||
	   WILL_FIRE_RL_action_l87c22 ||
	   WILL_FIRE_RL_action_l88c22 ||
	   WILL_FIRE_RL_action_l90c13 ||
	   WILL_FIRE_RL_action_l94c13 ||
	   WILL_FIRE_RL_action_l96c13 ||
	   WILL_FIRE_RL_action_l101c17 ||
	   WILL_FIRE_RL_action_l102c17 ||
	   WILL_FIRE_RL_action_l104c13 ||
	   WILL_FIRE_RL_action_l114c13))
	$display("Error: \"BoxMullerTb.bsv\", line 70, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l70c9] and\n  [RL_action_l74c9, RL_action_l78c9, RL_action_l82c12, RL_action_l87c22,\n  RL_action_l88c22, RL_action_l90c13, RL_action_l94c13, RL_action_l96c13,\n  RL_action_l101c17, RL_action_l102c17, RL_action_l104c13, RL_action_l114c13]\n  ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkBoxMullerTb

