/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Thu May  3 20:30:46 -03 2018
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkBoxMullerTb_h__
#define __mkBoxMullerTb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkBoxMuller.h"


/* Class declaration for the mkBoxMullerTb module */
class MOD_mkBoxMullerTb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt64> INST__unnamed_;
  MOD_Wire<tUInt8> INST_abort;
  MOD_mkBoxMuller INST_boxmuller;
  MOD_Reg<tUInt32> INST_cont;
  MOD_Reg<tUInt64> INST_i;
  MOD_Reg<tUInt32> INST_n;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
  MOD_Reg<tUWide> INST_tup;
 
 /* Constructor */
 public:
  MOD_mkBoxMullerTb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE___me_check_10;
  tUInt8 DEF_CAN_FIRE___me_check_10;
  tUInt8 DEF_WILL_FIRE___me_check_9;
  tUInt8 DEF_CAN_FIRE___me_check_9;
  tUInt8 DEF_WILL_FIRE___me_check_8;
  tUInt8 DEF_CAN_FIRE___me_check_8;
  tUInt8 DEF_WILL_FIRE___me_check_7;
  tUInt8 DEF_CAN_FIRE___me_check_7;
  tUInt8 DEF_WILL_FIRE___me_check_6;
  tUInt8 DEF_CAN_FIRE___me_check_6;
  tUInt8 DEF_WILL_FIRE___me_check_5;
  tUInt8 DEF_CAN_FIRE___me_check_5;
  tUInt8 DEF_WILL_FIRE_RL_auto_finish;
  tUInt8 DEF_CAN_FIRE_RL_auto_finish;
  tUInt8 DEF_WILL_FIRE_RL_auto_start;
  tUInt8 DEF_CAN_FIRE_RL_auto_start;
  tUInt8 DEF_WILL_FIRE_RL_fsm_start;
  tUInt8 DEF_CAN_FIRE_RL_fsm_start;
  tUInt8 DEF_WILL_FIRE_RL_idle_l85c9_1;
  tUInt8 DEF_CAN_FIRE_RL_idle_l85c9_1;
  tUInt8 DEF_WILL_FIRE_RL_idle_l85c9;
  tUInt8 DEF_CAN_FIRE_RL_idle_l85c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l77c21;
  tUInt8 DEF_CAN_FIRE_RL_action_l77c21;
  tUInt8 DEF_WILL_FIRE_RL_action_l70c21;
  tUInt8 DEF_CAN_FIRE_RL_action_l70c21;
  tUInt8 DEF_WILL_FIRE_RL_action_l66c21;
  tUInt8 DEF_CAN_FIRE_RL_action_l66c21;
  tUInt8 DEF_WILL_FIRE_RL_action_l61c21;
  tUInt8 DEF_CAN_FIRE_RL_action_l61c21;
  tUInt8 DEF_WILL_FIRE_RL_action_l95c9;
  tUInt8 DEF_CAN_FIRE_RL_action_l95c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l91c9;
  tUInt8 DEF_CAN_FIRE_RL_action_l91c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l87c9;
  tUInt8 DEF_CAN_FIRE_RL_action_l87c9;
  tUInt8 DEF_WILL_FIRE_RL_restart;
  tUInt8 DEF_CAN_FIRE_RL_restart;
  tUInt8 DEF_WILL_FIRE_RL_state_every;
  tUInt8 DEF_CAN_FIRE_RL_state_every;
  tUInt8 DEF_WILL_FIRE_RL_state_fired__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_state_fired__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_state_handle_abort;
  tUInt8 DEF_CAN_FIRE_RL_state_handle_abort;
  tUInt8 DEF_WILL_FIRE_RL_start_reg__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_start_reg__dreg_update;
  tUInt64 DEF_b__h7377;
 
 /* Local definitions */
 private:
  tUInt32 DEF_in2_i__h20529;
  tUWide DEF_boxmuller_get___d106;
  tUWide DEF_ab__h25984;
  tUInt64 DEF_x__h25341;
  tUWide DEF_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d66;
  tUWide DEF_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d63;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d210;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d209;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d201;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d200;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d192;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC___d191;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d183;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC___d182;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d174;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d173;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d165;
  tUWide DEF__10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d164;
  tUWide DEF__10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d156;
  tUWide DEF__10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d155;
  tUWide DEF__10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_tup_09_ETC___d147;
  tUWide DEF__10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_tup_09_ETC___d146;
  tUWide DEF__10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_6_ETC___d138;
  tUWide DEF__10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_6_ETC___d137;
  tUWide DEF_IF_NOT_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONC_ETC___d78;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d205;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d196;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d187;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d178;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d169;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d160;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d151;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d142;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d134;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d131;
  tUWide DEF__0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_ETC___d211;
  tUWide DEF__0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_ETC___d202;
  tUWide DEF__0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_ETC___d193;
  tUWide DEF__0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_ETC___d184;
  tUWide DEF__0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_ETC___d175;
  tUWide DEF__0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_ETC___d166;
  tUWide DEF__0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_ETC___d157;
  tUWide DEF__0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_ETC___d148;
  tUWide DEF__0_CONCAT_0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_ETC___d139;
  tUWide DEF_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_CONCAT_0_0__ETC___d75;
  tUWide DEF_y__h27073;
  tUWide DEF_y__h26982;
  tUWide DEF_y__h26891;
  tUWide DEF_y__h26800;
  tUWide DEF_y__h26709;
  tUWide DEF_y__h26618;
  tUWide DEF_y__h26527;
  tUWide DEF_y__h26436;
  tUWide DEF_digit__h26217;
  tUWide DEF__0_CONCAT_IF_SEXT_tup_09_BITS_63_TO_32_12_13_BI_ETC___d130;
  tUWide DEF_tx__h27012;
  tUWide DEF_tx__h26921;
  tUWide DEF_tx__h26830;
  tUWide DEF_tx__h26739;
  tUWide DEF_tx__h26648;
  tUWide DEF_tx__h26557;
  tUWide DEF_tx__h26466;
  tUWide DEF_tx__h26375;
  tUWide DEF_tx__h26284;
  tUWide DEF__0_CONCAT_IF_IF_cont_8_BIT_31_9_THEN_NEG_cont_8_ETC___d74;
  tUWide DEF_digit__h26923;
  tUWide DEF_digit__h26832;
  tUWide DEF_digit__h26741;
  tUWide DEF_digit__h26650;
  tUWide DEF_digit__h26559;
  tUWide DEF_digit__h26468;
  tUWide DEF_digit__h26377;
  tUWide DEF_digit__h26286;
  tUWide DEF_digit__h27014;
 
 /* Rules */
 public:
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_l87c9();
  void RL_action_l91c9();
  void RL_action_l95c9();
  void RL_action_l61c21();
  void RL_action_l66c21();
  void RL_action_l70c21();
  void RL_action_l77c21();
  void RL_idle_l85c9();
  void RL_idle_l85c9_1();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_5();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
  void __me_check_10();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBoxMullerTb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkBoxMullerTb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkBoxMullerTb &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkBoxMullerTb &backing);
};

#endif /* ifndef __mkBoxMullerTb_h__ */
